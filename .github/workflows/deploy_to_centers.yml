# .github/workflows/deploy_to_centers.yml
name: Query Runners and Deploy

on:
  workflow_dispatch:
    inputs:
      tag_name:
        required: true
        type: string
      run_uuid:
        required: false
        type: string

env:
  AWS_REGION: us-east-1

jobs:
  check-runners:
    runs-on: ubuntu-latest
    permissions:
      contents: read     # to read centers.json and the template
      actions: none      # using a PAT instead
    outputs:
      valid_centers: ${{ steps.filter-runners.outputs.valid_centers }}
      offline_centers: ${{ steps.filter-runners.outputs.offline_centers }}
      no_label_centers: ${{ steps.filter-runners.outputs.no_label_centers }}

    steps:
      # 1) Checkout your code so we can read mapping & template
      - name: Checkout code
        uses: actions/checkout@v4

      # 2) Fetch org‑level runners using PAT
      - name: Fetch runners (raw)
        id: fetch-raw
        run: |
          curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.ACTIONS_PAT }}" \
            https://api.github.com/orgs/devopgitcs/actions/runners \
            > runners.raw.json
          echo "=== RAW RESPONSE ==="
          cat runners.raw.json
          echo "=== end RAW ==="

      # 3) Filter centers directly against runners.raw.json
      - name: Filter centers
        id: filter-runners
        run: |
          # Load mapping
          mapping=$(jq -c '.' .github/data/centers.json)

          # Which runners are offline?
          offline=$(jq -r '.runners[] | select(.status=="offline") | .name' runners.raw.json)

          valid=(); off=(); no_label=()

          for center in $(echo "$mapping" | jq -r 'keys[]'); do
            label=$(echo "$mapping" | jq -r --arg c "$center" '.[$c]')
            # Find runner by that label
            match=$(jq -r --arg L "$label" '.runners[] | select(.labels[].name == $L) | .name' runners.raw.json)

            if [ -z "$match" ]; then
              no_label+=("$center")
            elif echo "$offline" | grep -qx "$match"; then
              off+=("$center")
            else
              valid+=("$center")
            fi
          done

          # Convert bash arrays to JSON arrays
          to_json() {
            if [ $# -eq 0 ]; then
              echo '[]'
            else
              printf '%s\n' "$@" | jq -R . | jq -s .
            fi
          }

          valid_json=$(to_json "${valid[@]}")
          off_json=$(to_json "${off[@]}")
          no_label_json=$(to_json "${no_label[@]}")

          # Write outputs via the new GITHUB_OUTPUT file
          echo "valid_centers=$valid_json" >> $GITHUB_OUTPUT
          echo "offline_centers=$off_json" >> $GITHUB_OUTPUT
          echo "no_label_centers=$no_label_json" >> $GITHUB_OUTPUT

      # 4) Warn and fail if nothing valid
      - name: Warn or fail
        run: |
          echo "⚠️ Offline centers: ${{ steps.filter-runners.outputs.offline_centers }}"
          echo "⚠️ No‑label centers: ${{ steps.filter-runners.outputs.no_label_centers }}"
          if [ "$(echo '${{ steps.filter-runners.outputs.valid_centers }}' | jq length)" -eq 0 ]; then
            echo "❌ No valid centers – exiting."
            exit 1
          fi

  deploy:
    needs: check-runners
    strategy:
      matrix:
        center: ${{ fromJson(needs.check-runners.outputs.valid_centers) }}
    runs-on: ${{ matrix.center }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Render docker-compose.yml
        run: |
          sed -e "s|\${IMAGE_TAG}|${{ inputs.tag_name }}|" \
              -e "s|\${REPLACE_CENTER_ID}|${{ matrix.center }}|" \
              docker-compose.yml.template > docker-compose.yml
          echo ">>> docker-compose.yml:"
          cat docker-compose.yml

      - name: Run Docker Compose
        run: |
          docker-compose up --build -d
          docker-compose ps
