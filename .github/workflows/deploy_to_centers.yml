# .github/workflows/deploy_to_centers.yml
name: Query Runners and Deploy

# Give this workflow permission to list runners and read repo files
permissions:
  actions: read
  contents: read

on:
  workflow_dispatch:
    inputs:
      tag_name:
        required: true
        type: string
      run_uuid:
        required: false
        type: string

env:
  AWS_REGION: us-east-1

jobs:
  check-runners:
    runs-on: ubuntu-latest
    outputs:
      valid_centers: ${{ steps.filter-runners.outputs.valid_centers }}
      offline_centers: ${{ steps.filter-runners.outputs.offline_centers }}
      no_label_centers: ${{ steps.filter-runners.outputs.no_label_centers }}

    steps:
      # 1. Fetch runners and dump raw output for debugging
      - name: Fetch Runners (raw debug)
        id: fetch-raw
        run: |
          curl -s -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/devopgitcs/test_centers/actions/runners \
            > runners.raw.json
          echo "=== RAW RESPONSE ==="
          cat runners.raw.json
          echo "=== end RAW ==="

      # 2. Parse runners into an array
      - name: Parse Runners JSON
        id: fetch-runners
        run: |
          jq -c '.runners[]' runners.raw.json > runners.json
          echo "Parsed $(wc -l < runners.json) runners"
          echo "runners=$(cat runners.json)" >> $GITHUB_ENV

      # 3. Load centers.json mapping
      - name: Load Centers Mapping
        id: load-centers
        run: |
          CENTER_MAPPING=$(jq -c '.' .github/data/centers.json)
          echo "CENTER_MAPPING=$CENTER_MAPPING" >> $GITHUB_ENV

      # 4. Filter valid/offline/no‑label centers
      - name: Filter Centers
        id: filter-runners
        run: |
          OFFLINE_NAMES=$(jq -r 'select(.status=="offline")|.name' runners.json)

          VALID=(); OFF=(); NO_LABEL=()
          for CENT in $(echo "${{ env.CENTER_MAPPING }}" | jq -r 'keys[]'); do
            LABEL=$(echo "${{ env.CENTER_MAPPING }}" | jq -r ".[\"$CENT\"]")
            MATCH=$(jq -r --arg L "$LABEL" '.[]|select(.labels|index($L))|.name' runners.json)

            if [ -z "$MATCH" ]; then
              NO_LABEL+=("$CENT")
            elif echo "$OFFLINE_NAMES" | grep -qx "$MATCH"; then
              OFF+=("$CENT")
            else
              VALID+=("$CENT")
            fi
          done

          # Export as JSON arrays
          to_json() { printf '%s\n' "$@" | jq -R . | jq -s .; }

          echo "::set-output name=valid_centers::$(to_json "${VALID[@]}")"
          echo "::set-output name=offline_centers::$(to_json "${OFF[@]}")"
          echo "::set-output name=no_label_centers::$(to_json "${NO_LABEL[@]}")"

      # 5. Warn and/or fail if nothing to do
      - name: Warn or Fail
        run: |
          echo "⚠️ Offline centers: ${{ steps.filter-runners.outputs.offline_centers }}"
          echo "⚠️ No‑label centers: ${{ steps.filter-runners.outputs.no_label_centers }}"
          if [ "$(echo '${{ steps.filter-runners.outputs.valid_centers }}' | jq length)" -eq 0 ]; then
            echo "❌ No valid centers found – exiting."
            exit 1
          fi

  deploy:
    needs: check-runners
    strategy:
      matrix:
        center: ${{ fromJson(needs.check-runners.outputs.valid_centers) }}
    runs-on: ${{ matrix.center }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Render docker-compose.yml
        run: |
          sed -e "s|\${IMAGE_TAG}|${{ inputs.tag_name }}|" \
              -e "s|\${REPLACE_CENTER_ID}|${{ matrix.center }}|" \
              docker-compose.yml.template > docker-compose.yml
          echo "Generated docker-compose.yml:"
          cat docker-compose.yml

      - name: Run Docker Compose
        run: |
          docker-compose up --build -d
          docker-compose ps
